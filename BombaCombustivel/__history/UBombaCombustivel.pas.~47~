unit UBombaCombustivel;

interface
  Type
    TBomba = class
    private
      FTipoCombustivel : String;
      FValorPorLitro : Currency;
      FQuantidadeNaBomba: Double;

    procedure SetTipoCombustivel(const Value: String);
    procedure SetValorPorLitro(const Value: Currency);
    procedure SetQuantidadeBomba(const Value: Double);

    function GetTipoCombustivel: String;
    function GetValorPorLitro: Currency;
    function GetQuantidadeBomba: Double;

   public

    property TipoCombustivel   : String   read GetTipoCombustivel  write SetTipoCombustivel;
    property ValorPorLitro     : Currency read GetValorPorLitro    write SetValorPorLitro;
    property QuantidadeNaBomba : Double   read GetQuantidadeBomba  write SetQuantidadeBomba;

    procedure GravaPessoa; virtual; abstract;

    function abastecePorValor(const aValue: Currency): Double;
    function abastecerPorLitro(const aValue: Currency): Currency;
    procedure alterarCombustivel(const aValue: String);
    procedure alterarValor(const aValue: Currency);
    procedure alterarQuantidadeCombustivel(const aValue: Double);

   constructor Create(const aValorPorLitro: Currency; const aQuantidadeNaBomba: Double;
                               const aTipoCombustivel: String);
    end;

  implementation

{ TBomba }
uses
  SysUtils;


function TBomba.abastecePorValor(const aValue: Currency): Double;
begin
  Result := aValue / ValorPorLitro;
    if QuantidadeNaBomba < Result then
      raise Exception.Create('Quantidade Insuficiente na bomba');

    QuantidadeNaBomba := QuantidadeNaBomba - Result;

end;

function TBomba.abastecerPorLitro(const aValue: Currency): Currency;
begin
  Result := aValue * ValorPorLitro;
end;

procedure TBomba.alterarCombustivel(const aValue: String);
begin
  TipoCombustivel := aValue;
end;

procedure TBomba.alterarQuantidadeCombustivel(const aValue: Double);
begin
  if QuantidadeNaBomba < aValue then
      raise Exception.Create('Quantidade Insuficiente na bomba');

  QuantidadeNaBomba := QuantidadeNaBomba - aValue;

end;

procedure TBomba.alterarValor(const aValue: Currency);
begin
  ValorPorLitro := aValue;
end;

constructor TBomba.Create(const aValorPorLitro: Currency;
  const aQuantidadeNaBomba: Double; const aTipoCombustivel: String);
begin
  ValorPorLitro := aValorPorLitro;
  QuantidadeNaBomba := aQuantidadeNaBomba;
  TipoCombustivel := aTipoCombustivel;
end;

function TBomba.GetQuantidadeBomba: Double;
begin
  Result := FQuantidadeNaBomba;
end;

function TBomba.GetTipoCombustivel: String;
begin
  Result := FTipoCombustivel;
end;

function TBomba.GetValorPorLitro: Currency;
begin
  Result := FValorPorLitro;
end;

procedure TBomba.SetQuantidadeBomba(const Value: Double);
begin
  FQuantidadeNaBomba := Value;
end;

procedure TBomba.SetTipoCombustivel(const Value: String);
begin
  FTipoCombustivel := Value;
end;

procedure TBomba.SetValorPorLitro(const Value: Currency);
begin
  FValorPorLitro := Value;
end;

end.
